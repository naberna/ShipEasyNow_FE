{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\berna\\\\Desktop\\\\mainproject\\\\SEN\\\\front-end\\\\src\\\\forms\\\\orderForm\\\\InstantQuote.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { BsArrowRightShort } from \"react-icons/bs\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { zipCodeListFrom } from \"../../actions/zipCodeActions\";\nimport { zipCodeListTo } from \"../../actions/zipCodeActions\";\nimport { orderNew } from \"../../actions/orderFormActions\";\nimport { zipFrom, zipTo, pickUpDate, dropOffDate, numberOfCars } from \"../validations/instantQuoteValidations\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InstantQuote = () => {\n  _s();\n\n  const HISTORY = useHistory();\n  const dispatch = useDispatch();\n  const [inputs, setInputs] = useState({\n    zipFrom: \"\",\n    zipTo: \"\",\n    pickUpDate: \"\",\n    dropOffDate: \"\",\n    numberOfCars: \"\"\n  });\n  const [zipFrom, setZipFrom] = useState(\"\");\n  const [zipTo, setZipTo] = useState(\"\");\n  const [pickUpDate, setPickUpDate] = useState(\"\");\n  const [dropOffDate, setDropOffDate] = useState(\"\");\n  const [numberOfCars, setNumberOfCars] = useState(\"\");\n\n  const handleChange = inputName => e => {\n    e.preventDefault();\n    setInputs({ ...inputs,\n      [inputName]: e.target.value\n    });\n  };\n\n  function convertDateFormat(date) {\n    var newDate = new Date(date);\n    return String(newDate.getDate() + \"/\" + (newDate.getMonth() + 1) + \"/\" + newDate.getFullYear());\n  }\n\n  const Continue = async e => {\n    e.preventDefault();\n    let formData = {\n      zipFrom: inputs.zipFrom,\n      zipTo: inputs.zipTo,\n      pickUpDate: inputs.pickUpDate,\n      dropOffDate: inputs.dropOffDate,\n      numberOfCars: inputs.numberOfCars\n    };\n    const isZipFrom = await zipFrom.isValid(formData);\n    const isZipTo = await zipTo.isValid(formData);\n    const isPickUpDate = await pickUpDate.isValid(formData);\n    const isDropOffDate = await dropOffDate.isValid(formData);\n    const isNumberOfCars = await numberOfCars.isValid(formData);\n    dispatch(zipCodeListFrom(inputs.zipFrom));\n    dispatch(zipCodeListTo(inputs.zipTo));\n    dispatch(orderNew(inputs.zipFrom, inputs.zipTo, convertDateFormat(inputs.pickUpDate), convertDateFormat(inputs.dropOffDate), inputs.numberOfCars));\n\n    if (isZipFrom) {\n      setZipFrom(\"\");\n    } else {\n      zipFrom.validate(formData).catch(ex => {\n        setZipFrom(ex.message);\n      });\n    }\n\n    if (isZipFrom && isZipTo && isPickUpDate && isDropOffDate && isNumberOfCars) {\n      HISTORY.push({\n        pathname: \"/checkout\",\n        state: inputs\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    className: \"instantquote p-3 mb-5\",\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"formGroupFrom\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"form-subtitle\",\n        children: \"Transport car FROM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        placeholder: \"ZIP or CITY\",\n        name: \"zipFrom\",\n        onChange: handleChange(\"zipFrom\"),\n        defaultValue: inputs.zipFrom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: zipFrom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"formGroupTo\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"form-subtitle\",\n        children: \"Transport car TO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        placeholder: \"ZIP or CITY\",\n        name: \"zipTo\",\n        onChange: handleChange(\"zipTo\"),\n        defaultValue: inputs.zipTo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"pickUpDate\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"form-subtitle\",\n        children: \"Pick Up Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"date\",\n        onChange: handleChange(\"pickUpDate\"),\n        name: \"pickUpDate\",\n        defaultValue: inputs.pickUpDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"dropOffDate\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"form-subtitle\",\n        children: \"Drop Off Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"date\",\n        onChange: handleChange(\"dropOffDate\"),\n        name: \"dropOffDate\",\n        defaultValue: inputs.dropOffDate,\n        \"data-date-format\": \"DD/MM/YYYY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"selectNumberOfCars\",\n      children: /*#__PURE__*/_jsxDEV(Form.Control, {\n        as: \"select\",\n        className: \"dropdown\",\n        onChange: handleChange(\"numberOfCars\"),\n        name: \"numberOfCars\",\n        defaultValue: inputs.numberOfCars,\n        \"data-date-format\": \"DD/MM/YYYY\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Number Of Cars\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), [...Array(10).keys()].map(x => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: x + 1,\n          children: x + 1\n        }, x + 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 145,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn button\",\n      onClick: Continue,\n      children: [\"Vehicle Details\", /*#__PURE__*/_jsxDEV(BsArrowRightShort, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InstantQuote, \"nT65VkJGdDltoxKL0+nrsNVnPHI=\", false, function () {\n  return [useHistory, useDispatch];\n});\n\n_c = InstantQuote;\nexport default InstantQuote;\n\nvar _c;\n\n$RefreshReg$(_c, \"InstantQuote\");","map":{"version":3,"sources":["C:/Users/berna/Desktop/mainproject/SEN/front-end/src/forms/orderForm/InstantQuote.js"],"names":["React","useState","Form","BsArrowRightShort","useHistory","useDispatch","zipCodeListFrom","zipCodeListTo","orderNew","zipFrom","zipTo","pickUpDate","dropOffDate","numberOfCars","InstantQuote","HISTORY","dispatch","inputs","setInputs","setZipFrom","setZipTo","setPickUpDate","setDropOffDate","setNumberOfCars","handleChange","inputName","e","preventDefault","target","value","convertDateFormat","date","newDate","Date","String","getDate","getMonth","getFullYear","Continue","formData","isZipFrom","isValid","isZipTo","isPickUpDate","isDropOffDate","isNumberOfCars","validate","catch","ex","message","push","pathname","state","Array","keys","map","x"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { BsArrowRightShort } from \"react-icons/bs\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { zipCodeListFrom } from \"../../actions/zipCodeActions\";\r\nimport { zipCodeListTo } from \"../../actions/zipCodeActions\";\r\nimport { orderNew } from \"../../actions/orderFormActions\";\r\nimport { zipFrom, zipTo, pickUpDate, dropOffDate, numberOfCars } from \"../validations/instantQuoteValidations\";\r\n\r\nconst InstantQuote = () => {\r\n  const HISTORY = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const [inputs, setInputs] = useState({\r\n    zipFrom: \"\",\r\n    zipTo: \"\",\r\n    pickUpDate: \"\",\r\n    dropOffDate: \"\",\r\n    numberOfCars: \"\",\r\n  });\r\n\r\n  const [zipFrom, setZipFrom] = useState(\"\");\r\n  const [zipTo, setZipTo] = useState(\"\");\r\n  const [pickUpDate, setPickUpDate] = useState(\"\");\r\n  const [dropOffDate, setDropOffDate] = useState(\"\");\r\n  const [numberOfCars, setNumberOfCars] = useState(\"\");\r\n\r\n  const handleChange = (inputName) => (e) => {\r\n    e.preventDefault();\r\n\r\n    setInputs({\r\n      ...inputs,\r\n      [inputName]: e.target.value,\r\n    });\r\n  };\r\n\r\n  function convertDateFormat(date) {\r\n    var newDate = new Date(date);\r\n    return String(\r\n      newDate.getDate() +\r\n        \"/\" +\r\n        (newDate.getMonth() + 1) +\r\n        \"/\" +\r\n        newDate.getFullYear()\r\n    );\r\n  }\r\n\r\n  const Continue = async (e) => {\r\n    e.preventDefault();\r\n    let formData = {\r\n      zipFrom: inputs.zipFrom,\r\n      zipTo: inputs.zipTo,\r\n      pickUpDate: inputs.pickUpDate,\r\n      dropOffDate: inputs.dropOffDate,\r\n      numberOfCars: inputs.numberOfCars,\r\n    };\r\n\r\n    const isZipFrom = await zipFrom.isValid(formData);\r\n    const isZipTo = await zipTo.isValid(formData);\r\n    const isPickUpDate = await pickUpDate.isValid(formData);\r\n    const isDropOffDate = await dropOffDate.isValid(formData);\r\n    const isNumberOfCars = await numberOfCars.isValid(formData);\r\n\r\n    dispatch(zipCodeListFrom(inputs.zipFrom));\r\n    dispatch(zipCodeListTo(inputs.zipTo));\r\n\r\n    dispatch(\r\n      orderNew(\r\n        inputs.zipFrom,\r\n        inputs.zipTo,\r\n        convertDateFormat(inputs.pickUpDate),\r\n        convertDateFormat(inputs.dropOffDate),\r\n        inputs.numberOfCars\r\n      )\r\n    );\r\n\r\n    if (isZipFrom) {\r\n      setZipFrom(\"\");\r\n    } else {\r\n      zipFrom.validate(formData).catch((ex) => {\r\n        setZipFrom(ex.message);\r\n      });\r\n    }\r\n\r\n    if(isZipFrom && isZipTo && isPickUpDate && isDropOffDate && isNumberOfCars) {\r\n      HISTORY.push({ pathname: \"/checkout\", state: inputs });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form className=\"instantquote p-3 mb-5\">\r\n      <Form.Group controlId=\"formGroupFrom\">\r\n        <Form.Label className=\"form-subtitle\">Transport car FROM</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"ZIP or CITY\"\r\n          name=\"zipFrom\"\r\n          onChange={handleChange(\"zipFrom\")}\r\n          defaultValue={inputs.zipFrom}\r\n        />\r\n        <p>{zipFrom}</p>\r\n      </Form.Group>\r\n      <Form.Group controlId=\"formGroupTo\">\r\n        <Form.Label className=\"form-subtitle\">Transport car TO</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"ZIP or CITY\"\r\n          name=\"zipTo\"\r\n          onChange={handleChange(\"zipTo\")}\r\n          defaultValue={inputs.zipTo}\r\n        />\r\n      </Form.Group>\r\n      <Form.Group controlId=\"pickUpDate\">\r\n        <Form.Label className=\"form-subtitle\">Pick Up Date</Form.Label>\r\n        <Form.Control\r\n          type=\"date\"\r\n          onChange={handleChange(\"pickUpDate\")}\r\n          name=\"pickUpDate\"\r\n          defaultValue={inputs.pickUpDate}\r\n        ></Form.Control>\r\n      </Form.Group>\r\n      <Form.Group controlId=\"dropOffDate\">\r\n        <Form.Label className=\"form-subtitle\">Drop Off Date</Form.Label>\r\n        <Form.Control\r\n          type=\"date\"\r\n          onChange={handleChange(\"dropOffDate\")}\r\n          name=\"dropOffDate\"\r\n          defaultValue={inputs.dropOffDate}\r\n          data-date-format=\"DD/MM/YYYY\"\r\n        ></Form.Control>\r\n      </Form.Group>\r\n      <Form.Group controlId=\"selectNumberOfCars\">\r\n        {/* <Form.Label>Number Of Cars</Form.Label> */}\r\n        <Form.Control\r\n          as=\"select\"\r\n          className=\"dropdown\"\r\n          onChange={handleChange(\"numberOfCars\")}\r\n          name=\"numberOfCars\"\r\n          defaultValue={inputs.numberOfCars}\r\n          data-date-format=\"DD/MM/YYYY\"\r\n        >\r\n          <option>Number Of Cars</option>\r\n          {[...Array(10).keys()].map((x) => (\r\n            <option key={x + 1} value={x + 1}>\r\n              {x + 1}\r\n            </option>\r\n          ))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n      <button className=\"btn button\" onClick={Continue}>\r\n        Vehicle Details\r\n        <BsArrowRightShort />\r\n      </button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default InstantQuote;\r\n"]},"metadata":{},"sourceType":"module"}