{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\berna\\\\Desktop\\\\mainproject\\\\SEN\\\\front-end\\\\src\\\\forms\\\\orderForm\\\\InstantQuote.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { BsArrowRightShort } from \"react-icons/bs\";\nimport { useHistory } from \"react-router-dom\";\nimport { useDispatch } from \"react-redux\";\nimport { zipCodeListFrom } from \"../../actions/zipCodeActions\";\nimport { zipCodeListTo } from \"../../actions/zipCodeActions\";\nimport { orderNew } from \"../../actions/orderFormActions\";\nimport { zipFrom, zipTo, pickUpDate, dropOffDate, numberOfCars } from \"../validations/instantQuoteValidations\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InstantQuote = () => {\n  _s();\n\n  const HISTORY = useHistory();\n  const dispatch = useDispatch();\n  const [inputs, setInputs] = useState({\n    zipFrom: \"\",\n    zipTo: \"\",\n    pickUpDate: \"\",\n    dropOffDate: \"\",\n    numberOfCars: \"\"\n  });\n\n  const handleChange = inputName => e => {\n    e.preventDefault();\n    setInputs({ ...inputs,\n      [inputName]: e.target.value\n    });\n  };\n\n  function convertDateFormat(date) {\n    var newDate = new Date(date);\n    return String(newDate.getDate() + \"/\" + (newDate.getMonth() + 1) + \"/\" + newDate.getFullYear());\n  }\n\n  const Continue = async e => {\n    e.preventDefault();\n    let formData = {\n      zipFrom: inputs.zipFrom,\n      zipTo: inputs.zipTo,\n      pickUpDate: inputs.pickUpDate,\n      dropOffDate: inputs.dropOffDate,\n      numberOfCars: inputs.numberOfCars\n    };\n    const isZipFrom = await surNameValidation.isValid(formData);\n    const isValidName = await nameValidation.isValid(formData);\n    const isValid = await instantQuoteValidation.isValid(formData);\n    dispatch(zipCodeListFrom(inputs.zipFrom));\n    dispatch(zipCodeListTo(inputs.zipTo));\n    dispatch(orderNew(inputs.zipFrom, inputs.zipTo, convertDateFormat(inputs.pickUpDate), convertDateFormat(inputs.dropOffDate), inputs.numberOfCars));\n\n    if (isValid) {\n      HISTORY.push({\n        pathname: \"/checkout\",\n        state: inputs\n      });\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    className: \"instantquote p-3 mb-5\",\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"formGroupFrom\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"form-subtitle\",\n        children: \"Transport car FROM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        placeholder: \"ZIP or CITY\",\n        name: \"zipFrom\",\n        onChange: handleChange(\"zipFrom\"),\n        defaultValue: inputs.zipFrom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"formGroupTo\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"form-subtitle\",\n        children: \"Transport car TO\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        placeholder: \"ZIP or CITY\",\n        name: \"zipTo\",\n        onChange: handleChange(\"zipTo\"),\n        defaultValue: inputs.zipTo\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"pickUpDate\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"form-subtitle\",\n        children: \"Pick Up Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"date\",\n        onChange: handleChange(\"pickUpDate\"),\n        name: \"pickUpDate\",\n        defaultValue: inputs.pickUpDate\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"dropOffDate\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"form-subtitle\",\n        children: \"Drop Off Date\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"date\",\n        onChange: handleChange(\"dropOffDate\"),\n        name: \"dropOffDate\",\n        defaultValue: inputs.dropOffDate,\n        \"data-date-format\": \"DD/MM/YYYY\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"selectNumberOfCars\",\n      children: /*#__PURE__*/_jsxDEV(Form.Control, {\n        as: \"select\",\n        className: \"dropdown\",\n        onChange: handleChange(\"numberOfCars\"),\n        name: \"numberOfCars\",\n        defaultValue: inputs.numberOfCars,\n        \"data-date-format\": \"DD/MM/YYYY\",\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          children: \"Number Of Cars\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), [...Array(10).keys()].map(x => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: x + 1,\n          children: x + 1\n        }, x + 1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 128,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn button\",\n      onClick: Continue,\n      children: [\"Vehicle Details\", /*#__PURE__*/_jsxDEV(BsArrowRightShort, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 136,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InstantQuote, \"dTDXL6dKonpr12zqi54PpDneEzk=\", false, function () {\n  return [useHistory, useDispatch];\n});\n\n_c = InstantQuote;\nexport default InstantQuote;\n\nvar _c;\n\n$RefreshReg$(_c, \"InstantQuote\");","map":{"version":3,"sources":["C:/Users/berna/Desktop/mainproject/SEN/front-end/src/forms/orderForm/InstantQuote.js"],"names":["React","useState","Form","BsArrowRightShort","useHistory","useDispatch","zipCodeListFrom","zipCodeListTo","orderNew","zipFrom","zipTo","pickUpDate","dropOffDate","numberOfCars","InstantQuote","HISTORY","dispatch","inputs","setInputs","handleChange","inputName","e","preventDefault","target","value","convertDateFormat","date","newDate","Date","String","getDate","getMonth","getFullYear","Continue","formData","isZipFrom","surNameValidation","isValid","isValidName","nameValidation","instantQuoteValidation","push","pathname","state","Array","keys","map","x"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { BsArrowRightShort } from \"react-icons/bs\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { zipCodeListFrom } from \"../../actions/zipCodeActions\";\r\nimport { zipCodeListTo } from \"../../actions/zipCodeActions\";\r\nimport { orderNew } from \"../../actions/orderFormActions\";\r\nimport { zipFrom, zipTo, pickUpDate, dropOffDate, numberOfCars } from \"../validations/instantQuoteValidations\";\r\n\r\nconst InstantQuote = () => {\r\n  const HISTORY = useHistory();\r\n  const dispatch = useDispatch();\r\n\r\n  const [inputs, setInputs] = useState({\r\n    zipFrom: \"\",\r\n    zipTo: \"\",\r\n    pickUpDate: \"\",\r\n    dropOffDate: \"\",\r\n    numberOfCars: \"\",\r\n  });\r\n\r\n  const handleChange = (inputName) => (e) => {\r\n    e.preventDefault();\r\n\r\n    setInputs({\r\n      ...inputs,\r\n      [inputName]: e.target.value,\r\n    });\r\n  };\r\n\r\n  function convertDateFormat(date) {\r\n    var newDate = new Date(date);\r\n    return String(\r\n      newDate.getDate() +\r\n        \"/\" +\r\n        (newDate.getMonth() + 1) +\r\n        \"/\" +\r\n        newDate.getFullYear()\r\n    );\r\n  }\r\n\r\n  const Continue = async (e) => {\r\n    e.preventDefault();\r\n    let formData = {\r\n      zipFrom: inputs.zipFrom,\r\n      zipTo: inputs.zipTo,\r\n      pickUpDate: inputs.pickUpDate,\r\n      dropOffDate: inputs.dropOffDate,\r\n      numberOfCars: inputs.numberOfCars,\r\n    };\r\n\r\n    const isZipFrom = await surNameValidation.isValid(formData);\r\n    const isValidName = await nameValidation.isValid(formData);\r\n    const isValid = await instantQuoteValidation.isValid(formData);\r\n\r\n    dispatch(zipCodeListFrom(inputs.zipFrom));\r\n    dispatch(zipCodeListTo(inputs.zipTo));\r\n\r\n    dispatch(\r\n      orderNew(\r\n        inputs.zipFrom,\r\n        inputs.zipTo,\r\n        convertDateFormat(inputs.pickUpDate),\r\n        convertDateFormat(inputs.dropOffDate),\r\n        inputs.numberOfCars\r\n      )\r\n    );\r\n    if(isValid) {\r\n      HISTORY.push({ pathname: \"/checkout\", state: inputs });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Form className=\"instantquote p-3 mb-5\">\r\n      <Form.Group controlId=\"formGroupFrom\">\r\n        <Form.Label className=\"form-subtitle\">Transport car FROM</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"ZIP or CITY\"\r\n          name=\"zipFrom\"\r\n          onChange={handleChange(\"zipFrom\")}\r\n          defaultValue={inputs.zipFrom}\r\n        />\r\n        {/* TODO: ERROR MESSAGE */}\r\n      </Form.Group>\r\n      <Form.Group controlId=\"formGroupTo\">\r\n        <Form.Label className=\"form-subtitle\">Transport car TO</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"ZIP or CITY\"\r\n          name=\"zipTo\"\r\n          onChange={handleChange(\"zipTo\")}\r\n          defaultValue={inputs.zipTo}\r\n        />\r\n      </Form.Group>\r\n      <Form.Group controlId=\"pickUpDate\">\r\n        <Form.Label className=\"form-subtitle\">Pick Up Date</Form.Label>\r\n        <Form.Control\r\n          type=\"date\"\r\n          onChange={handleChange(\"pickUpDate\")}\r\n          name=\"pickUpDate\"\r\n          defaultValue={inputs.pickUpDate}\r\n        ></Form.Control>\r\n      </Form.Group>\r\n      <Form.Group controlId=\"dropOffDate\">\r\n        <Form.Label className=\"form-subtitle\">Drop Off Date</Form.Label>\r\n        <Form.Control\r\n          type=\"date\"\r\n          onChange={handleChange(\"dropOffDate\")}\r\n          name=\"dropOffDate\"\r\n          defaultValue={inputs.dropOffDate}\r\n          data-date-format=\"DD/MM/YYYY\"\r\n        ></Form.Control>\r\n      </Form.Group>\r\n      <Form.Group controlId=\"selectNumberOfCars\">\r\n        {/* <Form.Label>Number Of Cars</Form.Label> */}\r\n        <Form.Control\r\n          as=\"select\"\r\n          className=\"dropdown\"\r\n          onChange={handleChange(\"numberOfCars\")}\r\n          name=\"numberOfCars\"\r\n          defaultValue={inputs.numberOfCars}\r\n          data-date-format=\"DD/MM/YYYY\"\r\n        >\r\n          <option>Number Of Cars</option>\r\n          {[...Array(10).keys()].map((x) => (\r\n            <option key={x + 1} value={x + 1}>\r\n              {x + 1}\r\n            </option>\r\n          ))}\r\n        </Form.Control>\r\n      </Form.Group>\r\n      <button className=\"btn button\" onClick={Continue}>\r\n        Vehicle Details\r\n        <BsArrowRightShort />\r\n      </button>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default InstantQuote;\r\n"]},"metadata":{},"sourceType":"module"}