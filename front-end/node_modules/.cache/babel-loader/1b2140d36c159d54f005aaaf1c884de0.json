{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\berna\\\\Desktop\\\\mainproject\\\\SEN\\\\front-end\\\\src\\\\forms\\\\InstantQuote.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport { Form } from \"react-bootstrap\";\nimport { BsArrowRightShort } from \"react-icons/bs\";\nimport validateQuote from \"./validateQuote\";\nimport { useHistory } from \"react-router-dom\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst InstantQuote = () => {\n  _s();\n\n  const [inputs, setInputs] = useState({\n    zipFrom: \"\",\n    zipTo: \"\"\n  });\n  const [errors, setErrors] = useState([]);\n  const HISTORY = useHistory();\n  const inputNames = ['zipFrom', 'zipTo'];\n\n  const doValidate = inputsInState => {\n    let success = true;\n    console.log('RAN', inputsInState);\n    inputNames.forEach(inputName => {\n      const validation = validateQuote(inputName, inputsInState[inputName]);\n      console.log(inputName, validation);\n\n      if (!validation.isValid) {\n        success = false;\n        setError(inputName, validation.message);\n      } else removeError(inputName);\n    });\n    return success;\n  };\n\n  useEffect(() => {\n    doValidate(inputs);\n  }, [inputs]);\n\n  const Continue = e => {\n    e.preventDefault();\n    if (doValidate(inputs)) HISTORY.push({\n      pathname: \"/checkout\",\n      state: inputs\n    });\n  };\n\n  const setError = (inputName, message = null) => {\n    const isExist = (errors.filter(error => error.inputName === inputName) || []).length > 0;\n    if (isExist) return;\n    setErrors([...errors, {\n      inputName,\n      message\n    }]);\n  };\n\n  const removeError = inputNames => {\n    if (!(typeof inputNames === \"string\" || Array.isArray(inputNames))) return;\n    if (!inputNames.length) return;\n    if (typeof inputNames === \"string\") inputNames = [inputNames];\n    const newState = errors.filter(error => !inputNames.includes(error.inputName));\n    setErrors(newState);\n  };\n\n  const GetError = props => {\n    const {\n      inputName\n    } = props;\n\n    const EMPTY_COMPONENT = /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false);\n\n    if (!inputName) return EMPTY_COMPONENT;\n    const findedError = errors.find(error => error.inputName === inputName);\n    if (!findedError) return EMPTY_COMPONENT;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      type: \"invalid\",\n      className: \"error\",\n      children: findedError.message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  };\n\n  const handleChange = inputName => e => {\n    e.preventDefault();\n    setInputs({ ...inputs,\n      [inputName]: e.target.value\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Form, {\n    className: \"instantquote p-3 mb-5\",\n    novalidateQuote: true,\n    children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"formGroupFrom\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"form-subtitle\",\n        children: \"Transport car FROM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        placeholder: \"ZIP or CITY\",\n        name: \"zipFrom\",\n        onChange: handleChange(\"zipFrom\"),\n        defaultValue: inputs.zipFrom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GetError, {\n        inputName: \"zipFrom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      controlId: \"formGroupFrom\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"form-subtitle\",\n        children: \"Transport car FROM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n        type: \"text\",\n        placeholder: \"ZIP or CITY\",\n        name: \"zipFrom\",\n        onChange: handleChange(\"zipFrom\"),\n        defaultValue: inputs.zipFrom\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(GetError, {\n        inputName: \"zipFrom\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n      className: \"radio\",\n      children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n        className: \"radio-subtitle\",\n        children: \"Transport type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"radio-check\",\n        onChange: handleChange(\"transportTye\"),\n        children: [/*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"radio\",\n          label: \"Door-to-door\",\n          id: \"dooor\",\n          name: \"transportType\",\n          value: \"Door-to-door\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"radio\",\n          label: \"Open\",\n          id: \"open\",\n          name: \"transportType\",\n          value: \"Open\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"radio\",\n          label: \"Enclosed\",\n          id: \"enclosed\",\n          name: \"transportType\",\n          value: \"Enclosed\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"radio\",\n          label: \"Expired\",\n          id: \"expired\",\n          name: \"transportType\",\n          value: \"Expired\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n          type: \"radio\",\n          label: \"Hawaii\",\n          id: \"hawai\",\n          name: \"transportType\",\n          value: \"Hawaii\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn button\",\n      onClick: Continue,\n      children: [\"Vehicle Details\", /*#__PURE__*/_jsxDEV(BsArrowRightShort, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 100,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InstantQuote, \"S0CAUtfyczPpqIIci2Be0BZp6q0=\", false, function () {\n  return [useHistory];\n});\n\n_c = InstantQuote;\nexport default InstantQuote;\n\nvar _c;\n\n$RefreshReg$(_c, \"InstantQuote\");","map":{"version":3,"sources":["C:/Users/berna/Desktop/mainproject/SEN/front-end/src/forms/InstantQuote.js"],"names":["React","useState","useEffect","Form","BsArrowRightShort","validateQuote","useHistory","InstantQuote","inputs","setInputs","zipFrom","zipTo","errors","setErrors","HISTORY","inputNames","doValidate","inputsInState","success","console","log","forEach","inputName","validation","isValid","setError","message","removeError","Continue","e","preventDefault","push","pathname","state","isExist","filter","error","length","Array","isArray","newState","includes","GetError","props","EMPTY_COMPONENT","findedError","find","handleChange","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { Form } from \"react-bootstrap\";\r\nimport { BsArrowRightShort } from \"react-icons/bs\";\r\nimport validateQuote from \"./validateQuote\";\r\nimport { useHistory } from \"react-router-dom\";\r\n\r\nconst InstantQuote = () => {\r\n  const [inputs, setInputs] = useState({\r\n    zipFrom: \"\",\r\n    zipTo: \"\",\r\n  })\r\n  const [errors, setErrors] = useState([\r\n\r\n  ])\r\n  const HISTORY = useHistory()\r\n  const inputNames = [\r\n    'zipFrom',\r\n    'zipTo'\r\n  ] \r\n\r\n  const doValidate = (inputsInState) => {\r\n    let success = true;\r\n    console.log('RAN', inputsInState);\r\n    inputNames.forEach(inputName => {\r\n      const validation = validateQuote(inputName, inputsInState[inputName]);\r\n      console.log(inputName, validation);\r\n      if (!validation.isValid) { \r\n        success=false;\r\n        setError(inputName, validation.message);\r\n      }\r\n      else removeError(inputName);\r\n    })\r\n    return success;\r\n  }\r\n\r\n  useEffect(() => {\r\n    doValidate(inputs);\r\n  }, [inputs])\r\n\r\n\r\n  const Continue = (e) => {\r\n    e.preventDefault();\r\n    if(doValidate(inputs)) \r\n       HISTORY.push({ pathname: \"/checkout\", state: inputs });\r\n  };\r\n\r\n\r\n  const setError = (inputName, message = null) => {\r\n    const isExist = (\r\n      (\r\n        errors.filter(error=> error.inputName===inputName)\r\n      ) || []\r\n    ).length > 0;\r\n    if(isExist) return;\r\n    setErrors([\r\n      ...errors,\r\n      {\r\n        inputName,\r\n        message,\r\n      },\r\n    ])\r\n  };\r\n\r\n  const removeError = (inputNames) => {\r\n    if (!(typeof inputNames === \"string\" || Array.isArray(inputNames))) return;\r\n    if (!inputNames.length) return;\r\n    if (typeof inputNames === \"string\") inputNames = [inputNames];\r\n    const newState = errors.filter(\r\n      (error) => !inputNames.includes(error.inputName)\r\n    );\r\n    setErrors(newState)\r\n  };\r\n\r\n  const GetError = (props) => {\r\n    const {inputName} = props;\r\n    const EMPTY_COMPONENT = <></>;\r\n    if (!inputName) return EMPTY_COMPONENT;\r\n    const findedError = errors.find(\r\n      (error) => error.inputName === inputName\r\n    );\r\n    if (!findedError) return EMPTY_COMPONENT;\r\n    return (\r\n      <div type=\"invalid\" className=\"error\">\r\n        {findedError.message}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  const handleChange = (inputName) => (e) => {\r\n    e.preventDefault();\r\n\r\n    setInputs({\r\n      ...inputs,\r\n      [inputName]: e.target.value,\r\n    });\r\n  };\r\n\r\n\r\n  return (\r\n    <Form className=\"instantquote p-3 mb-5\" novalidateQuote>\r\n      <Form.Group controlId=\"formGroupFrom\">\r\n        <Form.Label className=\"form-subtitle\">Transport car FROM</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"ZIP or CITY\"\r\n          name=\"zipFrom\"\r\n          onChange={handleChange(\"zipFrom\")}\r\n          defaultValue={inputs.zipFrom}\r\n        />\r\n        <GetError inputName={\"zipFrom\"}></GetError>\r\n      </Form.Group>\r\n      <Form.Group controlId=\"formGroupFrom\">\r\n        <Form.Label className=\"form-subtitle\">Transport car FROM</Form.Label>\r\n        <Form.Control\r\n          type=\"text\"\r\n          placeholder=\"ZIP or CITY\"\r\n          name=\"zipFrom\"\r\n          onChange={handleChange(\"zipFrom\")}\r\n          defaultValue={inputs.zipFrom}\r\n        />\r\n        <GetError inputName={\"zipFrom\"}></GetError>\r\n      </Form.Group>\r\n      <Form.Group className=\"radio\">\r\n        <Form.Label className=\"radio-subtitle\">Transport type</Form.Label>\r\n        <div\r\n          className=\"radio-check\"\r\n          onChange={handleChange(\"transportTye\")}\r\n        >\r\n          <Form.Check\r\n            type=\"radio\"\r\n            label=\"Door-to-door\"\r\n            id=\"dooor\"\r\n            name=\"transportType\"\r\n            value=\"Door-to-door\"\r\n          />\r\n          <Form.Check\r\n            type=\"radio\"\r\n            label=\"Open\"\r\n            id=\"open\"\r\n            name=\"transportType\"\r\n            value=\"Open\"\r\n          />\r\n          <Form.Check\r\n            type=\"radio\"\r\n            label=\"Enclosed\"\r\n            id=\"enclosed\"\r\n            name=\"transportType\"\r\n            value=\"Enclosed\"\r\n          />\r\n          <Form.Check\r\n            type=\"radio\"\r\n            label=\"Expired\"\r\n            id=\"expired\"\r\n            name=\"transportType\"\r\n            value=\"Expired\"\r\n          />\r\n          <Form.Check\r\n            type=\"radio\"\r\n            label=\"Hawaii\"\r\n            id=\"hawai\"\r\n            name=\"transportType\"\r\n            value=\"Hawaii\"\r\n          />\r\n        </div>\r\n      </Form.Group>\r\n      <button className=\"btn button\" onClick={Continue}>\r\n        Vehicle Details\r\n        <BsArrowRightShort />\r\n      </button>\r\n    </Form>\r\n  );\r\n}\r\n\r\nexport default InstantQuote;\r\n"]},"metadata":{},"sourceType":"module"}