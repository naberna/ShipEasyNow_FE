{"ast":null,"code":"import Axios from \"axios\";\nimport { NEW_ORDER_FORM_VEHICLE_DETAILS, NEW_ORDER_INFORMAION_DETAILS, NEW_ORDER_PAYMENT_METHOD, CALCULATE_COST_REQUEST, CALCULATE_COST_SUCCESS, CALCULATE_COST_FAIL, NEW_ORDER_REQUEST, NEW_ORDER_SUCCESS, NEW_ORDER_FAIL, NEW_ORDER_CAR_REQUEST, NEW_ORDER_CAR_SUCCESS, NEW_ORDER_CAR_FAIL } from \"../constants/orderFormConstants\";\nexport const newOrder = order => async (dispatch, getState) => {\n  dispatch({\n    type: NEW_ORDER_REQUEST,\n    payload: order\n  });\n\n  try {\n    const {\n      userSignin: {\n        userInfo\n      }\n    } = getState();\n    const {\n      data\n    } = await Axios.post('http://159.65.163.193/order/new/', order, {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`,\n        \"cache-Control\": \"no-cache\",\n        \"content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    });\n    dispatch({\n      type: NEW_ORDER_SUCCESS,\n      payload: data.order\n    });\n  } catch (error) {\n    dispatch({\n      type: NEW_ORDER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n};\nexport const newOrderCar = (carMake, carModel, carYear, orderId, carVinNumber, carMileage, carIsOperable, carInAuction) => async dispatch => {\n  dispatch({\n    type: NEW_ORDER_CAR_REQUEST,\n    payload: {\n      carMake,\n      carModel,\n      carYear,\n      orderId,\n      carVinNumber,\n      carMileage,\n      carIsOperable,\n      carInAuction\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios({\n      method: \"POST\",\n      url: \"http://159.65.163.193/car/new/\",\n      headers: {\n        \"cache-Control\": \"no-cache\",\n        \"content-Type\": \"application/json\",\n        \"Access-Control-Allow-Origin\": \"*\"\n      },\n      data: {\n        car_make: carMake,\n        car_model: carModel,\n        car_year: carYear,\n        order_id: orderId,\n        car_vin_number: carVinNumber,\n        car_mileage: carMileage,\n        car_is_operable: carIsOperable,\n        car_is_in_auction: carInAuction\n      }\n    });\n    dispatch({\n      type: NEW_ORDER_CAR_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: NEW_ORDER_CAR_FAIL,\n      payload: error.message\n    });\n  }\n};\nexport const vehicleDetailsList = data => dispatch => {\n  dispatch({\n    type: NEW_ORDER_FORM_VEHICLE_DETAILS,\n    payload: data\n  });\n  localStorage.setItem(\"vehicleDetails\", JSON.stringify(data));\n};\nexport const informationDetailsList = data => dispatch => {\n  dispatch({\n    type: NEW_ORDER_INFORMAION_DETAILS,\n    payload: data\n  }); // localStorage.setItem('shippingAddress', JSON.stringify(data));\n};\nexport const savePaymentMethod = data => dispatch => {\n  dispatch({\n    type: NEW_ORDER_PAYMENT_METHOD,\n    payload: data\n  });\n};\nexport const calculateCost = (zipList, carList, individual) => async dispatch => {\n  dispatch({\n    type: CALCULATE_COST_REQUEST,\n    payload: {\n      zipList,\n      carList,\n      individual\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios({\n      method: \"POST\",\n      url: \"http://159.65.45.58/price\",\n      headers: {\n        \"content-Type\": \"application/json\"\n      },\n      data: {\n        ziplist: zipList,\n        carlist: carList,\n        individual: individual\n      }\n    });\n    dispatch({\n      type: CALCULATE_COST_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    dispatch({\n      type: CALCULATE_COST_FAIL,\n      payload: error.message\n    });\n  }\n};","map":{"version":3,"sources":["C:/Users/berna/Desktop/mainproject/SEN/front-end/src/actions/orderFormActions.js"],"names":["Axios","NEW_ORDER_FORM_VEHICLE_DETAILS","NEW_ORDER_INFORMAION_DETAILS","NEW_ORDER_PAYMENT_METHOD","CALCULATE_COST_REQUEST","CALCULATE_COST_SUCCESS","CALCULATE_COST_FAIL","NEW_ORDER_REQUEST","NEW_ORDER_SUCCESS","NEW_ORDER_FAIL","NEW_ORDER_CAR_REQUEST","NEW_ORDER_CAR_SUCCESS","NEW_ORDER_CAR_FAIL","newOrder","order","dispatch","getState","type","payload","userSignin","userInfo","data","post","headers","Authorization","token","error","response","message","newOrderCar","carMake","carModel","carYear","orderId","carVinNumber","carMileage","carIsOperable","carInAuction","method","url","car_make","car_model","car_year","order_id","car_vin_number","car_mileage","car_is_operable","car_is_in_auction","vehicleDetailsList","localStorage","setItem","JSON","stringify","informationDetailsList","savePaymentMethod","calculateCost","zipList","carList","individual","ziplist","carlist"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport {\r\n  NEW_ORDER_FORM_VEHICLE_DETAILS,\r\n  NEW_ORDER_INFORMAION_DETAILS,\r\n  NEW_ORDER_PAYMENT_METHOD,\r\n  CALCULATE_COST_REQUEST,\r\n  CALCULATE_COST_SUCCESS,\r\n  CALCULATE_COST_FAIL,\r\n  NEW_ORDER_REQUEST,\r\n  NEW_ORDER_SUCCESS,\r\n  NEW_ORDER_FAIL,\r\n  NEW_ORDER_CAR_REQUEST,\r\n  NEW_ORDER_CAR_SUCCESS,\r\n  NEW_ORDER_CAR_FAIL,\r\n} from \"../constants/orderFormConstants\";\r\n\r\nexport const newOrder = (order) => async (dispatch, getState) => {\r\n  dispatch({ type: NEW_ORDER_REQUEST, payload: order });\r\n  try {\r\n    const {\r\n      userSignin: { userInfo },\r\n    } = getState();\r\n    const { data } = await Axios.post('http://159.65.163.193/order/new/', order, {\r\n      headers: {\r\n        Authorization: `Bearer ${userInfo.token}`,\r\n        \"cache-Control\": \"no-cache\",\r\n        \"content-Type\": \"application/json\",\r\n        \"Access-Control-Allow-Origin\": \"*\",\r\n      },\r\n    });\r\n    dispatch({ type: NEW_ORDER_SUCCESS, payload: data.order });\r\n  } catch (error) {\r\n    dispatch({\r\n      type: NEW_ORDER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n};\r\n\r\nexport const newOrderCar =\r\n  (\r\n    carMake,\r\n    carModel,\r\n    carYear,\r\n    orderId,\r\n    carVinNumber,\r\n    carMileage,\r\n    carIsOperable,\r\n    carInAuction\r\n  ) =>\r\n  async (dispatch) => {\r\n    dispatch({\r\n      type: NEW_ORDER_CAR_REQUEST,\r\n      payload: {\r\n        carMake,\r\n        carModel,\r\n        carYear,\r\n        orderId,\r\n        carVinNumber,\r\n        carMileage,\r\n        carIsOperable,\r\n        carInAuction,\r\n      },\r\n    });\r\n    try {\r\n      const { data } = await Axios({\r\n        method: \"POST\",\r\n        url: \"http://159.65.163.193/car/new/\",\r\n        headers: {\r\n          \"cache-Control\": \"no-cache\",\r\n          \"content-Type\": \"application/json\",\r\n          \"Access-Control-Allow-Origin\": \"*\",\r\n        },\r\n        data: {\r\n          car_make: carMake,\r\n          car_model: carModel,\r\n          car_year: carYear,\r\n          order_id: orderId,\r\n          car_vin_number: carVinNumber,\r\n          car_mileage: carMileage,\r\n          car_is_operable: carIsOperable,\r\n          car_is_in_auction: carInAuction,\r\n        },\r\n      });\r\n      dispatch({ type: NEW_ORDER_CAR_SUCCESS, payload: data });\r\n    } catch (error) {\r\n      dispatch({ type: NEW_ORDER_CAR_FAIL, payload: error.message });\r\n    }\r\n  };\r\n\r\nexport const vehicleDetailsList = (data) => (dispatch) => {\r\n  dispatch({ type: NEW_ORDER_FORM_VEHICLE_DETAILS, payload: data });\r\n  localStorage.setItem(\"vehicleDetails\", JSON.stringify(data));\r\n};\r\n\r\nexport const informationDetailsList = (data) => (dispatch) => {\r\n  dispatch({ type: NEW_ORDER_INFORMAION_DETAILS, payload: data });\r\n  // localStorage.setItem('shippingAddress', JSON.stringify(data));\r\n};\r\n\r\nexport const savePaymentMethod = (data) => (dispatch) => {\r\n  dispatch({ type: NEW_ORDER_PAYMENT_METHOD, payload: data });\r\n};\r\n\r\nexport const calculateCost =\r\n  (zipList, carList, individual) => async (dispatch) => {\r\n    dispatch({\r\n      type: CALCULATE_COST_REQUEST,\r\n      payload: { zipList, carList, individual },\r\n    });\r\n    try {\r\n      const { data } = await Axios({\r\n        method: \"POST\",\r\n        url: \"http://159.65.45.58/price\",\r\n        headers: {\r\n          \"content-Type\": \"application/json\",\r\n        },\r\n        data: {\r\n          ziplist: zipList,\r\n          carlist: carList,\r\n          individual: individual,\r\n        },\r\n      });\r\n      dispatch({ type: CALCULATE_COST_SUCCESS, payload: data });\r\n    } catch (error) {\r\n      dispatch({ type: CALCULATE_COST_FAIL, payload: error.message });\r\n    }\r\n  };\r\n"]},"metadata":{},"sourceType":"module"}